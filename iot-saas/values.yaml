ClientName: nones
environment: development
traceID: nones0123

# Para mayor flexibilidad, las mismas apps se encargan de crear sus propias queues,exchanges,etc a demanda. 
# de manera tal que no se requieram ayor administracion en el rabbitMQ.
# Este tipo de configuraciones se puede administrar con un contrato entre developers (o DevTeams)
# Ej:  app01  envia a  infra    app02 consume de infra  y as√≠....
global:
  configs:
    mqttvhost: /
    queue: infra
    destination_queue: infra
    destination_rk: infra
    queue_client_status: clients

rabbitmq:
  image:
    registry: docker.io
    repository: bitnami/rabbitmq
    tag: 4.0.3
  auth:
    username: admin
    tls:
      enabled: false
  metrics:
    enabled: true
  persistence:
    enabled: false
  #extraPlugins: "rabbitmq_management rabbitmq_management_agent rabbitmq_web_stomp rabbitmq_web_stomp_examples rabbitmq_mqtt rabbitmq_prometheus rabbitmq_top rabbitmq_web_dispatch rabbitmq_web_mqtt rabbitmq_event_exchange rabbitmq_amqp1_0 rabbitmq_peer_discovery_k8s rabbitmq_tracing rabbitmq_stomp rabbitmq_peer_discovery_aws rabbitmq_federation rabbitmq_federation_management"


producer:
  image: jpradoar/mqtt-producer
  tag: 1.1.6
  imagePullPolicy: Always
  LoadBalancer: 
    enabled: false

consumer:
  image: jpradoar/mqtt-consumer
  tag: 1.1.7
  imagePullPolicy: Always
  

dbwriter:
  image: jpradoar/mqtt-dbwriter
  tag: 1.1.4
  imagePullPolicy: Always
  configs:
    queue: clients

mariadb:
  image: mariadb
  tag: 10.9.4
  imagePullPolicy: Always
  config:
    database_name: clients

webserver:
  image: jpradoar/mqtt-webserver
  tag: 1.1.8
  imagePullPolicy: Always
  LoadBalancer: 
    enabled: false

eventexporter:
  image: jpradoar/k8s-event-exporter
  tag: 1.0.1
  imagePullPolicy: Always
  aws_arn: arn:aws:iam::123456789012:role/rol-para-acceso-ecr-y-recursos-de-eks
